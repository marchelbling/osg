/* -*-c++-*- OpenSceneGraph - Copyright (C) Cedric Pinson
 *
 * This application is open source and may be redistributed and/or modified
 * freely and without restriction, both in commercial and non commercial
 * applications, as long as this copyright notice is maintained.
 *
 * This application is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
*/
#ifndef GEOMETRY_OPERATION_H
#define GEOMETRY_OPERATION_H

#include <osg/NodeVisitor>
#include <osg/Geometry>
#include <osg/Geode>
#include <map>
#include <algorithm> //std::max


bool needToSplit(osg::PrimitiveSet* p, unsigned int maxIndex = 65535, unsigned int* index = 0);
bool needToSplit(osg::Geometry& geom, unsigned int maxIndex = 65535);

class GeometryWireframeVisitor : public osg::NodeVisitor
{
public:
    typedef std::vector<osg::ref_ptr<osg::Geometry> > GeometryList;

    GeometryWireframeVisitor() : osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN) {}
    bool hasPolygonSurface(const osg::Geometry& geometry);
    osg::Geometry* applyGeometry(osg::Geometry& geometry);
    void apply(osg::Geode& geode);
    void apply(osg::Node& node);
};


class OpenGLESGeometryOptimizerVisitor : public osg::NodeVisitor
{
public:

    OpenGLESGeometryOptimizerVisitor() :
        osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN),
        _disableTriStrip(false),
        _disableMergeTriStrip(false),
        _generateTangentSpace(false),
        _triStripCacheSize(16),
        _triStripMinSize(2),
        _tangentUnit(0),
        _sceneNbTriangles(0),
        _sceneNbVertexes(0)
    {
    }

    void apply(osg::Geode& node);

    void setUseDrawArray(bool s) { _useDrawArray = s; }
    void setTripStripCacheSize(unsigned int size) { _triStripCacheSize = size; }
    void setTripStripMinSize(unsigned int size) { _triStripMinSize = std::max<unsigned int>(size, 2); }
    void setTexCoordChannelForTangentSpace(int uv) {
        _tangentUnit = uv;
        _generateTangentSpace = true;
    }
    void setDisableTriStrip(bool s) { _disableTriStrip = s; }
    void setDisableMergeTriStrip(bool s) { _disableMergeTriStrip = s; }

    void computeStats(osg::Geode& node);

    struct GeomStats {
        GeomStats() {
            _nbTriangles = 0;
            _nbVertexes = 0;
        }
        unsigned int _nbTriangles;
        unsigned int _nbVertexes;
        void computeStats(const osg::Geometry& geom) {

            // compute nb triangles and vertexes
            for (unsigned int tr = 0; tr < geom.getPrimitiveSetList().size(); tr++) {
                osg::PrimitiveSet* primitive = geom.getPrimitiveSetList()[tr];
                if (primitive &&
                    primitive->getMode() != osg::PrimitiveSet::LINES_ADJACENCY &&
                    primitive->getMode() != osg::PrimitiveSet::LINE_STRIP_ADJACENCY &&
                    primitive->getMode() != osg::PrimitiveSet::PATCHES &&
                    primitive->getMode() != osg::PrimitiveSet::LINE_STRIP &&
                    primitive->getMode() != osg::PrimitiveSet::LINE_LOOP &&
                    primitive->getMode() != osg::PrimitiveSet::LINES &&
                    primitive->getMode() != osg::PrimitiveSet::POINTS) {

                    _nbTriangles += geom.getPrimitiveSetList()[tr]->getNumPrimitives();
                }
            }
            _nbVertexes += geom.getVertexArray()->getNumElements();
        };
    };
    typedef std::map<osg::ref_ptr<osg::Geode> , GeomStats> GeodeProcessed;
    typedef std::map<osg::ref_ptr<osg::Geometry> , GeomStats> GeometryProcessed;
    GeodeProcessed _geodeProcessed;
    GeometryProcessed _geometryProcessed;

    // stats
    unsigned int _sceneNbTriangles;
    unsigned int _sceneNbVertexes;

protected:
    bool _disableTriStrip;
    unsigned int _triStripCacheSize;
    unsigned int _triStripMinSize;
    bool _disableMergeTriStrip;
    bool _useDrawArray;

    int _tangentUnit;
    bool _generateTangentSpace;

};
#endif
